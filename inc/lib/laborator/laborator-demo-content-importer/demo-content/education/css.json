{"laborator_custom_css":"\/* ===========================================================\r\nCustom modification only for EDUCATION Demo - START\r\n=========================================================== *\/\r\n\r\n\/* Homepage - Blog Posts Date *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry .blog-post-content-container .blog-post-date {\r\n    margin-bottom: 10px;\r\n    display: inline-block;\r\n    background: #bf2e2e;\r\n    color: #FFF;\r\n    height:20px;\r\n    line-height: 20px;\r\n    padding: 0px 5px;\r\n    position: absolute;\r\n    left: 29px;\r\n    top: -10px;\r\n}\r\n\r\n\/* Homepage -  Blog Post Date Post Relative Position *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry .blog-post-content-container {\r\n    position: relative;\r\n}\r\n\r\n\/* Homepage -  Blog Post Animation Transition Timing *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry {\r\n\ttransition: all 200ms;\t\r\n}\r\n\r\n\/* Homepage -  Blog Post Shadow Effect *\/\r\n.wpb_wrapper .lab-blog-posts .blog-post-entry:hover {\r\n\tbox-shadow: 0px 7px 25px rgba(0,0,0,0.05), 0px 1px 2px rgba(0,0,0,0.02);\r\n}\r\n\r\n\/* Homepage: Join Now  *\/\t\r\n.join-now {\r\n\tpadding: 35px 0px;\r\n}\r\n\/* Homepage: Join Now Align Center  *\/\t\r\n.align-center {\r\n\ttext-align: center;\t\r\n}\r\n\r\n\/* Homepage: Join Now Divider *\/\t\r\n.custom-divider {\r\n\twidth: 5%;\t\r\n}\r\n\r\n\/* Homepage -  Schools and Colleges *\/\r\n.schools-colleges {\r\n\tmargin: 0px;\t\r\n}\r\n\r\n\/* Homepage -  Schools and Colleges - Remove Margin and Padding From Inner Rows *\/\r\n.schools-colleges .vc_column_container>.vc_column-inner {\r\n\tpadding:0px !important;\r\n}\r\n\r\n\/* Homepage -  Schools and Colleges Image *\/\r\n.schools-colleges-image {\r\n\twidth: 85%;\r\n\tmargin: 0 auto;\r\n}\r\n\r\n\/* Homepage - Schools and Colleges Remove Padding *\/\r\n.lab-vc-container .schools-colleges  .vc_column_container {\r\n  padding:0px !important;\r\n}\r\n\r\n\r\n\/* Homepage - Schools and Colleges Accordion Toggle Size *\/\r\n.vc_toggle_size_md .vc_toggle_icon {\r\n    height: 18px;\r\n    width: 18px;\r\n}\r\n\r\n\/* Homepage - Facts in Numbers Number *\/\r\n.facts-in-numbers .wpb_wrapper .section-title>h2 {\r\n\ttext-align: center;\r\n\tcolor: #FFF;\r\n}\r\n\r\n\/* Homepage - Facts in Numbers Title *\/\r\n.facts-in-numbers .wpb_wrapper .section-title>p {\r\n\ttext-align: center;\r\n\tcolor: rgba(255,255,255,0.75);\r\n    text-shadow: 0px 1px 35px rgba(0,0,0,0.25);\t\r\n}\r\n\r\n\/* Blog: Posts Spacing *\/\r\nbody.blog .blog-posts {\r\n    margin-top: 35px;\r\n}\r\n\r\n\/* Blog: Comments Background Color *\/\r\n.single-post .post-comments {\r\n\tbackground: #f3f1ef;\r\n}\r\n\r\n\/* Blog: Sidebar Search *\/\r\n.blog-archive--widgets .widget.widget_product_search .search-bar input[name=\"s\"], \r\n.blog-archive--widgets .widget.widget_search .search-bar input[name=\"s\"] {\r\n\tbackground: #f3f1ef !important;\t\r\n}\r\n\r\n\/* Blog: Sidebar Styling *\/\r\n.blog-archive--widgets {\r\n\tposition: relative;\r\n    background: #FFF;\r\n    box-shadow: 0px 2px 15px rgba(0,0,0,0.07);\r\n    padding: 40px;\r\n    border: 1px solid #EEE;\r\n    margin-top: -50px !important;\r\n\tmargin-bottom: 40px;\r\n}\r\n\r\n\/* Blog: Sidebar List *\/\r\n.blog-archive--widgets .widget ul li {\r\n\tborder-bottom: 1px solid #e4e4e4;\r\n\tpadding: 15px 0px;\t\r\n}\r\n\r\n\/* Blog: Sidebar List Color *\/\r\n.blog-archive--widgets .widget ul li a {\r\n\tcolor: #333;\t\r\n}\r\n\r\n\/* Blog: Post *\/\r\n.blog-posts .post-item .post-details {\r\n\tpadding-left: 20px;\r\n\tpadding-top: 20px;\r\n\tpadding-right: 50px;\r\n}\r\n\r\n\/* Blog: Post Title Line Height *\/\r\n.blog-posts .post-item .post-details h3.post-title {\r\n\tline-height: 30px;\r\n}\r\n\r\n.blog-posts .post-item .post-details .post-title a:after {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Blog: Post Font Size *\/\r\n.blog-posts .post-item .post-details p {\r\n    line-height: 20px;\r\n} \r\n\r\n\/* Blog: Post Date *\/\r\n.blog-posts .post-item .post-details .post-meta.date {\r\n\tmargin-top: 10px;\t\r\n}\r\n\r\n\/* Blog: Darken Images *\/\r\n.blog-post-image .image-placeholder:after {\r\n  background: rgba(0,0,0,0.1);\r\n  content: \"\";\r\n  display: block;\r\n  width:100%;\r\n  height: 100%;\r\n  position:absolute;\r\n  top: 0;\r\n}\r\n\r\n\/* Homepage - Blog Posts Hide Post Description *\/\r\n.blog-post-excerpt {\r\n\tdisplay: none;\r\n}\r\n\r\n\/* Team Member *\/\r\n.team-holder .member .hover-state {\r\n    background-color: transparent !important;\r\n    background: -moz-linear-gradient(top, rgba(0,0,0,0) 0%, rgba(0,0,0,0.5) 50%, rgba(0,0,0,0.8) 100%);\r\n    background: -webkit-linear-gradient(top, rgba(0,0,0,0) 0%,rgba(0,0,0,0.5) 50%,rgba(0,0,0,0.8) 100%);\r\n    background: linear-gradient(to bottom, rgba(0,0,0,0) 0%,rgba(0,0,0,0.5) 80%,rgba(0,0,0,0.9) 100%);\r\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#000000',GradientType=0 );\r\n    opacity: 1;\r\n    -webkit-opacity: 1;\r\n    -moz-opacity: 1;\r\n    filter: alpha(opacity=100);\r\n    visibility: visible;    \r\n}\r\n\r\n\/* Team Members: Align Bottom *\/\r\n.team-holder .member .hover-state .member-details {\r\n\tbottom: 30px;\t\r\n}\r\n\r\n\/* Team Members: Member Name *\/\r\n.team-holder .member .hover-state .member-details h2 {\r\n    margin: 0;\r\n    border-bottom: 2px solid #BF2E2E;\r\n    display: inline-block;\r\n    padding-bottom: 5px;\r\n}\r\n\r\n\/* About University - Facts *\/\r\n.text-block {\r\n\theight: 277px;\t\r\n\tmargin-bottom: 0px;\r\n\tpadding: 50px;\r\n}\r\n\r\n\/* About University - Facts - Black and White Image *\/\r\n.bw-image.wpb_single_image img {\r\n\t-webkit-filter: grayscale(100%);\t\r\n\tfilter: grayscale(100%);\r\n\t-webkit-transition-duration: 0.3s;\r\n    -moz-transition-duration: 0.3s;\r\n    -o-transition-duration: 0.3s;\r\n}\r\n\r\n\/* About University - Facts - Black and White Image on Hover *\/\r\n.bw-image.wpb_single_image img:hover {\r\n\t-webkit-filter: grayscale(0%);\t\r\n\tfilter: grayscale(0%);\r\n\t-webkit-transition-duration: 0.3s;\r\n    -moz-transition-duration: 0.3s;\r\n    -o-transition-duration: 0.3s;\r\n}\r\n\r\n\/* Courses - Center Text *\/\r\n.portfolio-holder .item-box .info {\r\n\ttext-align: center;\r\n}\r\n\r\n\/* Courses - Title Border and Margin *\/\r\n.portfolio-holder .item-box .info h3 {\r\n    display: inline-block;\r\n    padding-bottom: 5px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n\/* Courses - Title Color *\/\r\n.portfolio-holder .item-box .info h3 a {\r\n\tcolor: #333;\r\n}\r\n\r\n\/* Courses - Darken Images *\/\r\n.portfolio-holder .item-box .photo .image-placeholder:after {\r\n\tbackground: rgba(0,0,0,0.1);\r\n\tcontent: \" \";\r\n\tdisplay: block;\r\n\twidth:100%;\r\n\theight: 100%;\r\n\tposition:absolute;\r\n\ttop: 0;\r\n}\r\n\r\n\/* Courses - Padding Top *\/\r\n.portfolio-title-holder .pt-column {\r\n\tpadding-top: 35px;\t\r\n}\r\n\r\n\/* Courses - Icon *\/\r\n.course-icon {\r\n\tdisplay: inline-block;\r\n\tfloat: left;\r\n\tmargin-right: 35px;\r\n}\r\n\r\n\/* Tutors: Position Image on Left *\/\r\n.portfolio-vc-type-container .team-holder .member .image-placeholder, \r\n.portfolio-vc-type-container .team-holder .member .thumb>a {\r\n\twidth: 50px;\r\n\theight: 50px;\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tbackground: none;\r\n}\r\n\r\n\/* Tutors: Tutor *\/\r\n.portfolio-vc-type-container .team-holder .member .hover-state {\r\n\tposition: relative;\r\n\tpadding: 0px;\r\n\tbackground: transparent;\r\n}\r\n\r\n\/* Tutors: Fix Tutor Name *\/\r\n.portfolio-vc-type-container .team-holder .member .hover-state .member-details h2 {\r\n\tborder: none;\r\n\tpadding: 0px;\r\n}\r\n\r\n\/* Tutors: Tutor Name *\/\r\n.portfolio-vc-type-container .team-holder .member .hover-state .member-details h2 a {\r\n    color: inherit;\r\n}\r\n\r\n\/* Tutors: Tutor Position *\/\r\n.portfolio-vc-type-container .team-holder .member .hover-state .member-details .job-title {\r\n\tcolor: #666;\r\n}\r\n\r\n\/* Tutors: Tutor Image Radius *\/\r\n.portfolio-vc-type-container .team-holder .member .image-placeholder img{\r\n\tborder-radius: 10%;\r\n\twidth: 50px;\r\n\theight: 50px;\r\n}\r\n\r\n\/* Tutors: Tutor Name and Position *\/\r\n.portfolio-vc-type-container .team-holder .member .hover-state .member-details {\r\n\tposition: relative;\r\n\tcolor: #333;\r\n\tbottom: 0px;\r\n\tmargin-left: 70px;\r\n\tmin-height: 50px;\r\n\tmargin-bottom: 20px\r\n}\r\n\r\n\/* Contact: Input Border Bottom *\/\t\r\n.contact-form input, \r\n.contact-form textarea,\r\n.comment-form input, \r\n.comment-form textarea  {\r\n\tborder-bottom-color: #e4e4e4;\r\n\tpadding-bottom:10px;\r\n}\r\n\r\n\/* Contact: Textarea Lines *\/\r\n.contact-form textarea, \r\n.comment-form textarea {\r\n    background-image: linear-gradient(#e4e4e4 1px, transparent 1px);\r\n\theight: auto;\t\r\n}\r\n\r\n\/* Contact: Input Border Bottom *\/\t\r\n.contact-form .form-group label,\r\n.comment-form .form-group label,\r\n.labeled-input-row label, \r\n.labeled-textarea-row label {\r\n\tborder-bottom-color: #e4e4e4;\t\r\n}\r\n\r\n\/* Contact: Input Border Bottom *\/\t\r\n.contact-form .form-group,\r\n.comment-form .form-group {\r\n\tmargin-bottom: 20px;\t\r\n}\r\n\r\n\/* Contact: Full Columned Inputs *\/\r\n.contact-form .row .col-sm-6 {\r\n\twidth: 100%;\t\r\n}\r\n\r\n\/* Contact: Color and Size for Label  *\/\r\n.wpb_wrapper .lab-contact-form .form-group label {\r\n\tcolor: #514a47;\r\n}\r\n\r\n\/* Contact: Send Button on Left *\/\r\n.contact-form .send {\r\n\tfloat: left;\t\r\n\tbackground: #9e9997 !important;\r\n}\r\n\r\n\/* Fields: Remove White Background *\/\r\n.contact-form input,\r\n.comment-form input {\r\n\tbackground-color: transparent;\r\n}\r\n\r\n\/* Footer Margin *\/\r\n.main-footer .big-footer {\r\n\tmargin-top: 50px;\r\n\tmargin-bottom: 50px;\r\n}\r\n\r\n\/* Footer Background *\/\r\n.main-footer.main-footer {\r\n\tbackground: #2b2726  !important;\r\n}\r\n\r\n\/* Footer - Title Color *\/\r\n.main-footer .footer-widgets .widget h1, \r\n.main-footer .footer-widgets .widget h2, \r\n.main-footer .footer-widgets .widget h3 {\r\n\tcolor: #FFF !important;\r\n}\r\n\r\n.main-footer .footer-widgets .widget ul li {\r\n\tpadding: 0px;\r\n}\r\n\r\n\/* Footer - Link Color *\/\r\n.main-footer a {\r\n\tcolor: #898989;\r\n}\r\n\r\n\/* Footer - Link Color on Hover *\/\r\nfooter.main-footer a:hover, \r\n.mobile-menu-wrapper .mobile-menu-container .cart-icon-link-mobile-container a:hover {\r\n    color: #FFF;\r\n}\r\n\r\n\/* Footer - List Link Color  *\/\r\nfooter.main-footer .big-footer .section ul li a {\r\n\tcolor: #514a47 !important;\r\n}\r\n\r\n\/* Footer - List Link Color on Hover *\/\r\nfooter.main-footer .big-footer .section ul li a:hover {\r\n\tcolor: #FFF !important;\r\n}\r\n\r\n\/* Footer Bottom Background *\/\r\n.footer-bottom {\r\n\tbackground: #272323 !important;\r\n}\r\n\r\n\/* Footer - Bottom Remove Border *\/\r\n.main-footer hr {\r\n\tborder-color: transparent;\r\n}\r\n\r\n\/* Footer - Bottom Padding *\/\r\n.main-footer .footer-bottom-content {\r\n\tpadding-left: 20px;\r\n\tpadding-right: 20px;\r\n}\r\n\r\n\/* Footer - Bottom Copyright Color *\/\r\n.main-footer .footer-bottom-content a, \r\n.main-footer .footer-bottom-content p {\r\n\tcolor: #FFF;\t\r\n}\r\n\r\n\/* Footer - Bottom Social Networks Background *\/\r\n.social-networks.rounded li a {\r\n\tbackground-color: #2b2726 !important;\t\r\n}\r\n\r\n\/* Footer - Bottom Social Networks Color *\/\r\n.social-networks.rounded li a i {\r\n\tcolor: #f6f5f3 !important;\r\n}\r\n\r\n\/* Footer - Bottom Social Networks Color on Hover *\/\r\n.social-networks.rounded li a:hover {\r\n\tbackground-color: #3a3433 !important;\t\r\n}\r\n\r\n.tp-tabs.tp-span-wrapper.inner.hebe.nav-pos-hor-right.nav-pos-ver-center.nav-dir-vertical {\r\n    background: transparent !important;\r\n}\r\n\r\n\/* CSS Applies for: Desktops and Tablets *\/\r\n@media (min-width:801px) {\r\n\t\/* Title Margin Top *\/\r\n\t.wpb_wrapper .section-title>h2 {\r\n\t\tmargin-top: 40px;\t\r\n\t}\r\n\t\t\r\n\t\/* Footer: Widgets Width *\/\r\n\t.footer-widgets  .widget-area.widgets--columned-layout.widgets--columns-5>.widget {\r\n\t\twidth: 18.75%;\r\n\t\tmargin-bottom: 10px;\r\n\t}\r\n\r\n\t\/* Footer: Widgets Aligned Right *\/\r\n\t.widget.widget_nav_menu#nav_menu-2,\r\n\t.widget.widget_nav_menu#nav_menu-4 {\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t\/* Footer: Widgets Aligned Left *\/\t\r\n\t.widget.widget_nav_menu#nav_menu-3,\r\n\t.widget.widget_nav_menu#nav_menu-5 {\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t\/* Footer: Widgets Padding *\/\t\r\n\t.widget.widget_nav_menu {\r\n\t\tpadding-top: 85px;\t\r\n\t}\r\n\t\r\n\t\/* Footer: Middle Widget Width *\/\r\n\t.footer-widgets  .widget-area.widgets--columned-layout.widgets--columns-5>.widget:nth-child(3) {\r\n\t\twidth: 25%;\r\n\t}\t \t\r\n\r\n\t\/* Footer: Middle Widget Text Centered *\/\r\n\t.footer-widgets .middle-widget {\r\n\t\ttext-align: center;\t\r\n\t}\r\n\t\r\n\t\/* Footer: Middle Widget Text Centered *\/\r\n\t.footer-widgets .widget p {\r\n\t\tcolor: #898989;\r\n\t}\r\n\t\r\n\r\n\t\/* Footer: Inner Shadow *\/\r\n\t.has-fixed-footer .wrapper {\r\n\t\tbox-shadow: rgba(0, 0, 0, 0.5) 0px 70px 100px -30px;\r\n\t}\r\n\t\r\n\t\/* Homepage - Join Now Padding *\/\r\n\t.join-now {\r\n\t\tpadding: 110px 0px !important;\r\n\t}\r\n}\r\n\r\n\/* CSS Applies for: Mobile Devices - All  *\/\r\n@media screen and (max-width: 767px) {\r\n\t\/* Homepage - Blog Posts Spacing *\/\r\n\t.blog-posts .post-item .post-details {\r\n\t\tmargin: 20px 0 0 0;\r\n\t\tpadding: 0px;\r\n\t}\r\n\r\n\t\/* Homepage - Blog Posts Margin Bottom *\/\r\n\t.blog-holder .box-holder {\r\n\t\tmargin-bottom: 35px;\r\n\t}\r\n}\r\n\r\n\/* CSS Applies for: Mobile Devices - Portrait *\/\r\n@media (max-width:480px) {\r\n\t\/* Footer: Widgets Text Centered *\/\r\n\t.footer-widgets .widget {\r\n\t\ttext-align: center;\t\r\n\t\tmargin-bottom: 35px;\r\n\t}\r\n}\r\n\/* ===========================================================\r\nCustom modification only for EDUCATION Demo - END\r\n=========================================================== *\/\r\n\r\n\/* ===========================================================\r\nUser CSS modifications\r\n=========================================================== *\/\r\n.example {\r\n \tcolor: red !important;\r\n}","laborator_custom_css_lg":"","laborator_custom_css_md":"","laborator_custom_css_sm":"","laborator_custom_css_xs":"","laborator_custom_css_less":"@my-var: #ccc;\n@my-other-var: #fff;\n\n.any-container {\n\t.nested-container {\n\t\tcolor: @my-var;\n\t}\n}","laborator_custom_css_sass":"$color: #abc;\n\ndiv.example-el {\n\tcolor: lighten($color, 20%);\n}"}